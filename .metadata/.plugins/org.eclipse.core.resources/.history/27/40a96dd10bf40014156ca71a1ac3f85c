
public class Player implements IPlayer{

	//TODO implement Object from GameOptions/Round
	private Destroyer[] destroyer;
	private Frigate[] frigate;
	private Corvette[] corvette;
	private Submarine[] submarine;
	private boolean isActive;
	private boolean isAlive;
	private int totalShips;
	private int destroyerInt;
	private int frigateInt;
	private int corvetteInt;
	private int submarineInt;
	private String playerName;
	
	//TODO Objects from MatrixTools/BattleField
	private field openField;
	private field field;
	
	/**
	 * Konstruktor der Klasse Player
	 * setzt isAlive auf true wenn er erstellt wird.
	 */
	
	public Player(){
		this.isAlive = true;
	}
	
	/**
	 * Getter isActive
	 * @return
	 */
	
	public boolean getIsActive(){
		return this.isActive;
	}
	
	/**
	 * Getter isAlive
	 * @return
	 */
	
	public boolean getIsAlive(){
		return this.isAlive;
	}
	
	/**
	 * Getter TotalShips
	 * @return
	 */

	public int getTotalShips() {
		return totalShips;
	}
	
	/**
	 * Setter totalShips
	 * @param totalShips
	 */

	public void setTotalShips(int totalShips) {
		this.totalShips = totalShips;
	}
	
	/**
	 * Getter DestroyerAnzahl
	 * @return
	 */

	public int getDestroyerInt() {
		return destroyerInt;
	}
	
	/**
	 * Setter DestroyerArray
	 * erzeugt mehrere Zerstörer
	 * @param destroyerInt
	 */

	public void setDestroyer(int destroyerInt) {
		this.destroyerInt = destroyerInt;
		destroyer = new Destroyer[destroyerInt];
		for(int i = 0; i < destroyerInt; i++){
			destroyer[i] = new Destroyer();
		}
	}
	
	/**
	 * setzt den Zerstörer auf isReady = false und setzt die NachladeZeit.
	 */
	
	public void setDestroyerIsntReady(){
		int counter = 0;
		for(int i = 0; i < this.destroyerInt; i++){
			if(counter == 0){
				if(destroyer[i].isReady() == true){
					destroyer[i].setReady(false);
					destroyer[i].setReloadTimeLeft(destroyer[i].getReloadTime());
					counter++;
				}
			}
			
		}
	}
	
	/**
	 * Zählt die NachladeZeit herunter
	 */
	
	public void reloadTimeCountdown(){
		for(int i = 0; i < destroyerInt; i++){
			if(destroyer[i].getReloadTimeLeft() > 0){
				destroyer[i].setReloadTimeLeft(destroyer[i].getReloadTimeLeft()-1);
			}else{
				destroyer[i].setReady(true);
			}
		}
		for(int i = 0; i < frigateInt; i++){
			if(frigate[i].getReloadTimeLeft() > 0){
				frigate[i].setReloadTimeLeft(frigate[i].getReloadTimeLeft()-1);
			}else{
				frigate[i].setReady(true);
			}
		}
		for(int i = 0; i < corvetteInt; i++){
			if(corvette[i].getReloadTimeLeft() > 0){
				corvette[i].setReloadTimeLeft(corvette[i].getReloadTimeLeft()-1);
			}else{
				corvette[i].setReady(true);
			}
		}
		for(int i = 0; i < submarineInt; i++){
			if(submarine[i].getReloadTimeLeft() > 0){
				submarine[i].setReloadTimeLeft(submarine[i].getReloadTimeLeft()-1);
			}else{
				submarine[i].setReady(true);
			}
		}
	}
	
	/**
	 * Getter FrigatteInt
	 * @return
	 */

	public int getFrigateInt() {
		return frigateInt;
	}
	
	/**
	 * Setter FrigateInt
	 * erzeugt mehrere Frigatten
	 * @param frigateInt
	 */

	public void setFrigate(int frigateInt) {
		this.frigateInt = frigateInt;
		frigate = new Frigate[frigateInt];
		for(int i = 0; i < frigateInt; i++){
			frigate[i] = new Frigate();
		}
	}
	
	/**
	 * setzt die Frigatte auf isReady = false und setzt die NachladeZeit.
	 */
	
	public void setFrigateIsntReady(){
		int counter = 0;
		for(int i = 0; i < this.frigateInt; i++){
			if(counter == 0){
				if(frigate[i].isReady() == true){
					frigate[i].setReady(false);
					frigate[i].setReloadTimeLeft(frigate[i].getReloadTime());
					counter++;
				}
			}
		}
	}
	
	/**
	 * Getter für das FrigatteInt
	 * @return
	 */

	public int getCorvetteInt() {
		return corvetteInt;
	}
	
	/**
	 * Setter Corvette
	 * erzeugt mehrer Corvetten
	 * @param corvetteInt
	 */

	public void setCorvette(int corvetteInt) {
		this.corvetteInt = corvetteInt;
		corvette = new Corvette[corvetteInt];
		for(int i = 0; i < corvetteInt; i++){
			corvette[i] = new Corvette();
		}
	}
	
	/**
	 * Setzt die Corvette auf inn´t ready
	 * und setzt die Nachladezeit
	 */
	
	public void setCorvetteIsntReady(){
		int counter = 0;
		for(int i = 0; i < this.corvetteInt; i++){
			if(counter == 0){
				if(corvette[i].isReady() == true){
					corvette[i].setReady(false);
					corvette[i].setReloadTimeLeft(corvette[i].getReloadTime());
					counter++;
				}
			}
			
		}
	}

	/**
	 * Getter SubmarineInt
	 * @return
	 */
	
	public int getSubmarineInt() {
		return submarineInt;
	}
	
	/**
	 * setzt Submarinen
	 * erzeugt mehrer U-Boote
	 * @param submarineInt
	 */

	public void setSubmarine(int submarineInt) {
		this.submarineInt = submarineInt;
		submarine = new Submarine[submarineInt];
		for(int i = 0; i < submarineInt; i++){
			submarine[i] = new Submarine();
		}
	}
	
	/**
	 * setzt das U-Boot auf nicht ready
	 * und setzt die Nachladezeit
	 */
	
	public void setSubmarineIsntReady(){
		int counter = 0;
		for(int i = 0; i < this.submarineInt; i++){
			if(counter == 0){
				if(submarine[i].isReady() == true){
					submarine[i].setReady(false);
					submarine[i].setReloadTimeLeft(submarine[i].getReloadTime());
					counter++;
				}
			}
			
		}
	}
	
	/**
	 * Getter für den Playernamen
	 * @return
	 */
	
	public String getPlayerName() {
		return playerName;
	}
	
	/**
	 * Setter Playername
	 * @param playerName
	 */

	public void setPlayerName(String playerName) {
		this.playerName = playerName;
	}

	/**
	 * setter isActive
	 * @param isActive
	 */
	
	public void setActive(boolean isActive) {
		this.isActive = isActive;
	}
	
	/**
	 * Setter isAlive
	 * @param isAlive
	 */

	public void setAlive(boolean isAlive) {
		this.isAlive = isAlive;
	}
	
	/**
	 * getter für ein openField
	 * @return
	 */
	
	public field getOpenField(){
		return openField;
	}
	
	/**
	 * Getter für das private Field
	 * @return
	 */

	public field getField() {
		return field;
	}
	
	/**
	 * setter für das private Field
	 * @param field
	 */

	public void setField(field field) {
		this.field = field;
	}
	
	/**
	 * Setter für das OpenField
	 * @param openField
	 */

	public void setOpenField(field openField) {
		this.openField = openField;
	}
	
	/**
	 * überprüft, ob ein Schiff verfügbar ist.
	 * @param whichShip
	 * @return true wenn whichShip isReady
	 */
	
	public boolean isAvailable(int whichShip){
		if(whichShip == 1){
			for(int i = 0; i < destroyer.length; i++){
				if(destroyer[i].isReady()){
					return true;
				}
			}
		}else if(whichShip == 2){
			for(int i = 0; i < frigate.length; i++){
				if(frigate[i].isReady()){
					return true;
				}
			}
		}else if(whichShip == 3){
			for(int i = 0; i < corvette.length; i++){
				if(corvette[i].isReady()){
					return true;
				}
			}
		}else if(whichShip == 4){
			for(int i = 0; i < submarine.length; i++){
				if(submarine[i].isReady()){
					return true;
				}
			}
		}
	
		return false;
	}

	/**
	 * Weist jedem Schiff seine Koordinaten zu (Horizontal)
	 * @param x
	 * @param y
	 * @param length
	 * @param shipNumber
	 */
	
	
	public void saveShipCoordinatesH(int x, int y, int length, int shipNumber){
		int[][] coordinates = new int[2][length];
		for(int i = 0; i < length; i++){
			coordinates[0][i] = x;
			coordinates[1][i] = y+i;
		}
		if(length == 5){
			destroyer[shipNumber].setCoordinates(coordinates);
		}else if(length == 4){
			frigate[shipNumber].setCoordinates(coordinates);
		}else if(length == 3){
			corvette[shipNumber].setCoordinates(coordinates);
		}else if(length == 2){
			submarine[shipNumber].setCoordinates(coordinates);
		}
		
	}
	
	/**
	 * Weist jedem Schiff seine Koordinaten zu (vertikal)
	 * @param x
	 * @param y
	 * @param length
	 * @param shipNumber
	 */
	
	public void saveShipCoordinatesV(int x, int y, int length, int shipNumber){
		int[][] coordinates = new int[2][length];
		for(int i = 0; i < length; i++){
			coordinates[0][i] = y;
			coordinates[1][i] = x+i;
		}
		if(length == 5){
			destroyer[shipNumber].setCoordinates(coordinates);
		}else if(length == 4){
			frigate[shipNumber].setCoordinates(coordinates);
		}else if(length == 3){
			corvette[shipNumber].setCoordinates(coordinates);
		}else if(length == 2){
			submarine[shipNumber].setCoordinates(coordinates);
		}
	}

	/**
	 * Überprüft, ob ein Schiff gesunken ist.
	 * @param x
	 * @param y
	 * @param shipSymbol
	 * @return true wenn das Schiff untergegangen ist.
	 */
	
	public boolean checkIfSunk(int x, int y, String shipSymbol){
		if(shipSymbol.equals("D")){
			for(int i = 0; i < destroyer.length; i++){
				destroyer[i].setCoordinatesIfHitted(x, y);
				if(destroyer[i].checkIfIsSwimming() == false){
					return true;
				}
			}
		}else if(shipSymbol.equals("F")){
			for(int i = 0; i < frigate.length; i++){
				frigate[i].setCoordinatesIfHitted(x, y);
				if(frigate[i].checkIfIsSwimming() == false){
					return true;
				}
			}
		}else if(shipSymbol.equals("C")){
			for(int i = 0; i < corvette.length; i++){
				corvette[i].setCoordinatesIfHitted(x, y);
				if(corvette[i].checkIfIsSwimming() == false){
					return true;
				}
			}
		}else if(shipSymbol.equals("S")){
			for(int i = 0; i < submarine.length; i++){
				submarine[i].setCoordinatesIfHitted(x, y);
				if(submarine[i].checkIfIsSwimming() == false){
					return true;
				}
			}
		}
		return false;
	}
	
	/**
	 * Überprüft, ob ein Spieler überhaupt ein Schiff zur verfügung hat.
	 * @return
	 */
	
	public boolean checkIfAnyShipIsReady(){
		for(int i = 0; i < destroyer.length; i++){
			if(destroyer[i].isReady()){
				return true;
			}
		}
		for(int i = 0; i < frigate.length; i++){
			if(frigate[i].isReady()){
				return true;
			}
		}
		for(int i = 0; i < corvette.length; i++){
			if(corvette[i].isReady()){
				return true;
			}
		}
		for(int i = 0; i < destroyer.length; i++){
			if(corvette[i].isReady()){
				return true;
			}
		}
		return false;
	}
}
